(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{389:function(e,t,n){"use strict";n.r(t);var o=n(7),a=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[t("code",[e._v("v0.0.116")]),e._v(" of LDK with added support for opening channels with "),t("a",{attrs:{href:"https://bitcoinops.org/en/topics/anchor-outputs",target:"_blank",rel:"noopener noreferrer"}},[e._v("anchor\noutputs"),t("OutboundLink")],1),e._v(" is live. This much-requested feature\nbrings multiple security and usability improvements to Lightning channels.")]),e._v(" "),t("p",[e._v("Lightning channels rely on pre-signed transactions that participants broadcast to the network if\nthey wish to close a channel unilaterally, e.g., when their counterparty is offline. Before\nintroducing anchor outputs to the Lightning protocol, participants continually negotiated their\ncommitment transaction’s fees based on the current block-space demand. This fee negotiation\nunfortunately came with its own set of problems. If participants disagreed on the proposed fee\nrange, a unilateral close made the channel unusable. Underestimating the required fee could result\nin loss of funds if an HTLC needed to be resolved on-chain, and overestimating would misallocate the\nchannel balance towards fees, potentially rendering the channel useless.")]),e._v(" "),t("p",[e._v("With anchor outputs, participants can now contribute the majority of fees required at the time of\nbroadcast by bumping the commitment transaction's fee via a child transaction using the\n"),t("a",{attrs:{href:"https://bitcoinops.org/en/topics/cpfp",target:"_blank",rel:"noopener noreferrer"}},[e._v("Child-Pays-For-Parent (CPFP)"),t("OutboundLink")],1),e._v(" fee-bumping mechanism. A small\nportion of fees must still be allocated to commitment transactions to ensure they can enter nodes'\nmempools independently. This will be required until "),t("a",{attrs:{href:"https://bitcoinops.org/en/topics/package-relay",target:"_blank",rel:"noopener noreferrer"}},[e._v("package\nrelay"),t("OutboundLink")],1),e._v(" is deployed network-wide. At that point, we\ncan have a fixed 1 sat/vB commitment transaction that is likely to do away with the fee negotiation\nonce and for all, eliminating the most common cause of unilateral closes that we see today.")]),e._v(" "),t("p",[e._v("Given LDK's modularized design, support for anchor outputs posed a few challenges. As a\nLightning-only library, we do not include an on-chain wallet as a traditional node implementation\nwould, requiring manual integration work by the application developer. However, we were able to\nleverage our existing "),t("a",{attrs:{href:"https://docs.rs/lightning/latest/lightning/events/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("event-based\nAPI"),t("OutboundLink")],1),e._v(" to communicate that a commitment\nor HTLC transaction's fee needs to be bumped. The handling of these events is often non-trivial, so\nwe added a utility\n("),t("a",{attrs:{href:"https://docs.rs/lightning/latest/lightning/events/bump_transaction/struct.BumpTransactionEventHandler.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("BumpTransactionEventHandler")]),t("OutboundLink")],1),e._v(")\nto simplify required integration work. With this utility, an application developer only needs to\nprovide a view into their on-chain wallet for LDK to access confirmed UTXOs and sign them.")]),e._v(" "),t("p",[e._v("Note that node operators need to maintain a reserve of confirmed funds if they wish to exit a\nchannel unilaterally. LDK will not ensure this reserve is enforced, but we’re exploring "),t("a",{attrs:{href:"https://github.com/lightningdevkit/rust-lightning/issues/2320",target:"_blank",rel:"noopener noreferrer"}},[e._v("possible\nways to do so"),t("OutboundLink")],1),e._v(". Without such\nenforcement, a node may open or accept more channels than its provisioned reserve allows it to\nhandle, potentially resulting in a loss of funds if any HTLCs need to be resolved on-chain. In the\nmeantime, application developers must determine whether their use case warrants such enforcement,\nthen implement it themselves. For example, a mobile user connected to a LSP could always defer to\nthe LSP to broadcast the latest state so that the user wouldn’t need to maintain a reserve.")]),e._v(" "),t("p",[e._v("While the feature is now available, we still consider it experimental. We're always seeking feedback\non how to improve our API and provide a better developer experience.")])])}),[],!1,null,null,null);t.default=a.exports}}]);