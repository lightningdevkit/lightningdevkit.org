(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{350:function(t,e,s){t.exports=s.p+"assets/img/vss-data-flow-simplified.b7a9150a.svg"},403:function(t,e,s){"use strict";s.r(e);var a=s(7),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("The Versioned Storage Service (VSS) provides a server-side storage solution for non-custodial mobile, web and hosted\nwallets. VSS significantly simplifies the wallet development process by offering a reliable, secure, and robust\nframework that stores and manages the various forms of state data required for the Lightning Network (LN) and Bitcoin\napplications.")]),t._v(" "),e("h1",{attrs:{id:"what-is-vss"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-is-vss"}},[t._v("#")]),t._v(" What Is VSS?")]),t._v(" "),e("p",[t._v("VSS is a client-server storage framework for Lightning Network (LN) and Bitcoin wallet data. VSS primarily serves two\ncore functionalities:")]),t._v(" "),e("ul",[e("li",[t._v("Recovery: VSS enables the restoration of states and wallet access, helping users regain their funds and control even\nin scenarios of device or data loss.")]),t._v(" "),e("li",[t._v("Multi-device Access: While this isn’t available now, future phases will allow the same wallet app across multiple\ndevices to securely share and access the LN state, leading to consistent access to funds.")])]),t._v(" "),e("p",[t._v("Clients can also leverage VSS for general application metadata storage including payment history, user metadata, and\nmore.")]),t._v(" "),e("h1",{attrs:{id:"why-vss"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#why-vss"}},[t._v("#")]),t._v(" Why VSS?")]),t._v(" "),e("p",[t._v("VSS aims to lower the barriers to high-quality LN wallet development. Wallet builders can host the VSS service in-house\nfor straightforward interaction with the service or use reliable third-party VSS providers, if available.")]),t._v(" "),e("p",[t._v("VSS was designed with privacy in mind, offering features such as client-side encryption, key-obfuscation, and robust\nauthorization. It also ensures data and version number verifiability, and will support multi-device access in the\nfuture. The software ensures modularity for seamless integration with different storage backend technologies.\nAdditionally, VSS can work with various applications with different key-level versioning and data-integrity mechanisms\nand even allows disabling versioning for single-device wallet usage.")]),t._v(" "),e("h3",{attrs:{id:"why-do-we-need-vss-as-primary-storage-for-lightning-wallets"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#why-do-we-need-vss-as-primary-storage-for-lightning-wallets"}},[t._v("#")]),t._v(" Why do we need VSS as primary storage for lightning wallets?")]),t._v(" "),e("p",[t._v("Keeping VSS in sync with the latest Lightning state isn’t optional; if the server’s version lags and the user loses the\ndevice, there is a risk for funds loss. That’s why VSS-powered wallets must be designed to hold off advancing the\nlightning state until everything’s securely updated on the server.")]),t._v(" "),e("p",[t._v("The on-device state of a Lightning wallet changes every time a user sends or receives payments. While some backup\noptions offer frequency-based backups, these can lead to data being out of sync and do not ensure full funds or channel\nrecovery if the device is lost. Protocols that sync asynchronously based on intervals inherently have insufficient data\nfor complete recovery by design.")]),t._v(" "),e("p",[t._v("Using VSS as the primary storage ensures that every state change is securely stored in real-time, enabling full recovery\nof funds and channels regardless of device loss.")]),t._v(" "),e("div",{staticStyle:{"text-align":"center"}},[e("img",{staticStyle:{display:"block",margin:"auto"},attrs:{src:s(350),alt:"VSS High Level Data Flow (Simplified)"}}),t._v(" "),e("p",{staticStyle:{"margin-top":"10px"}},[t._v("VSS High Level Data Flow (Simplified)")])]),t._v(" "),e("h1",{attrs:{id:"customization"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#customization"}},[t._v("#")]),t._v(" Customization")]),t._v(" "),e("p",[t._v("While VSS can be readily used, it is intended to be customized based on specific requirements. For example, clients\nmight need to implement custom authorization, encryption, or backend database integration with different cloud\nproviders. With the accurate facilitation of the API contract, wallets can easily switch between different instances of\nVSS. For example, a wallet can easily switch from VSS-Provider-A to VSS-Provider-B by just downloading the whole state\nand uploading it to the new provider.")]),t._v(" "),e("p",[t._v("By default, VSS incorporates a PostgreSQL implementation and can be hosted on preferred infrastructure/cloud providers\nsuch as AWS, GCP, and others. Its backend storage can be interchanged with other implementations for KeyValueStore if\nnecessary.")]),t._v(" "),e("h1",{attrs:{id:"usage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("h3",{attrs:{id:"using-with-ldk-node"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-with-ldk-node"}},[t._v("#")]),t._v(" Using with LDK Node:")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-node",target:"_blank",rel:"noopener noreferrer"}},[t._v("LDK Node"),e("OutboundLink")],1),t._v(" can be easily configured to run with VSS as primary storage. It\nis integrated in LDK Node (written in Rust) using "),e("a",{attrs:{href:"https://github.com/lightningdevkit/vss-rust-client",target:"_blank",rel:"noopener noreferrer"}},[t._v("VSS-rust-client"),e("OutboundLink")],1),t._v(",\nand there is also support for other languages such as Swift, Kotlin and Python\nthrough "),e("a",{attrs:{href:"https://mozilla.github.io/uniffi-rs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("UniFFI"),e("OutboundLink")],1),t._v(" bindings.")]),t._v(" "),e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("ldk_node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Builder")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" node_builder "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Builder")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Note: store_id can be freely set by the user and is useful for creating separate namespaces within storage.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// However, it must remain fixed for the entire life of the node as it is used for database storage.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" node "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node_builder\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("build_with_vss_store_and_fixed_headers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                    vss_endpoint"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    store_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"using-with-other-applications"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-with-other-applications"}},[t._v("#")]),t._v(" Using with Other Applications")]),t._v(" "),e("p",[t._v("VSS is designed to store application-related metadata. Clients can use\nthe "),e("a",{attrs:{href:"https://github.com/lightningdevkit/vss-rust-client",target:"_blank",rel:"noopener noreferrer"}},[t._v("VSS-rust-client"),e("OutboundLink")],1),t._v(" directly for this purpose. This can help\nprovide a complete user data recovery solution for applications, as well as enable turn-key multi-device support in the\nfuture.")]),t._v(" "),e("h3",{attrs:{id:"hosting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hosting"}},[t._v("#")]),t._v(" Hosting")]),t._v(" "),e("p",[t._v("VSS can either be self-hosted or deployed in the cloud. If a service provider is hosting VSS for multiple users, it must\nbe configured with "),e("strong",[t._v("HTTPS")]),t._v(", "),e("strong",[t._v("Authentication/Authorization")]),t._v(", and "),e("strong",[t._v("rate-limiting")]),t._v(".")]),t._v(" "),e("p",[t._v("Application/wallet vendors can choose to either self-host VSS instances or use one of the existing hosted VSS providers.")]),t._v(" "),e("h3",{attrs:{id:"authentication-authorization"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#authentication-authorization"}},[t._v("#")]),t._v(" Authentication & Authorization")]),t._v(" "),e("p",[t._v("Currently, the VSS-server supports "),e("a",{attrs:{href:"https://datatracker.ietf.org/doc/html/rfc7519",target:"_blank",rel:"noopener noreferrer"}},[t._v("JWT"),e("OutboundLink")],1),t._v("-based authentication and\nauthorization, and can run without authentication for local testing or in trusted setups. The VSS-rust-client supports\nLNURL-auth & JWT based authentication and authorization. Switching to simple HTTP header authentication is\nstraightforward by adding another implementation. Note that the security of authentication heavily relies on using HTTPS\nfor all requests.")]),t._v(" "),e("h3",{attrs:{id:"scaling"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scaling"}},[t._v("#")]),t._v(" Scaling")]),t._v(" "),e("p",[t._v("VSS itself is stateless and can be horizontally scaled easily. VSS can be configured to point to a PostgreSQL cluster,\nand further scaling considerations need to be addressed in the PostgreSQL cluster.")]),t._v(" "),e("h1",{attrs:{id:"project-status"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#project-status"}},[t._v("#")]),t._v(" Project Status")]),t._v(" "),e("p",[t._v("VSS execution is split into two phases: Phase I prioritizes recovery and single-device use, whereas Phase II covers\nmulti-device use. Phase I is ready to use and integrated within "),e("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-node",target:"_blank",rel:"noopener noreferrer"}},[t._v("LDK Node"),e("OutboundLink")],1),t._v(".\nPhase II will be subject to monitoring for demand from wallets and may slip to a later date. Refer\nto "),e("a",{attrs:{href:"https://lightningdevkit.org/blog/ldk-roadmap/#vss",target:"_blank",rel:"noopener noreferrer"}},[t._v("LDK-Roadmap"),e("OutboundLink")],1),t._v(" for more details.")]),t._v(" "),e("h1",{attrs:{id:"implementation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implementation"}},[t._v("#")]),t._v(" Implementation")]),t._v(" "),e("p",[t._v("Currently, the VSS server has Java and Rust based implementations and is ready to use.\n"),e("a",{attrs:{href:"https://github.com/lightningdevkit/vss-rust-client",target:"_blank",rel:"noopener noreferrer"}},[t._v("VSS-rust-client"),e("OutboundLink")],1),t._v(" is a Rust-based client with support\nfor client-side encryption, key obfuscation, retry mechanisms, and LNURL-auth. VSS is also integrated starting\nwith "),e("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-node",target:"_blank",rel:"noopener noreferrer"}},[t._v("LDK Node"),e("OutboundLink")],1),t._v(" v0.4.x as alpha support.")]),t._v(" "),e("h1",{attrs:{id:"future"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#future"}},[t._v("#")]),t._v(" Future")]),t._v(" "),e("p",[t._v("In the future, LDK and VSS will introduce multi-device support. This will enable users to seamlessly access the same\nLightning node across multiple devices.")]),t._v(" "),e("p",[t._v("With synchronized updates and real-time access, users can manage their Lightning wallet from any preferred device,\nenhancing convenience and accessibility while maintaining consistency across platforms.")]),t._v(" "),e("h1",{attrs:{id:"conclusion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[t._v("#")]),t._v(" Conclusion")]),t._v(" "),e("p",[t._v("In summary, VSS provides an open-source, server-side cloud storage solution optimized specifically for non-custodial\nLightning/Bitcoin wallets as well as auxiliary application storage needs. Its key features include multi-device access,\nrecovery capabilities, user privacy protection, and data verifiability. With VSS, wallet developers can focus on\ncreating innovative Lightning wallets without the extra burden of crafting\ncomplex "),e("a",{attrs:{href:"https://lightningdevkit.org/blog/the-challenges-of-developing-non-custodial-lightning-on-mobile/#live-backups",target:"_blank",rel:"noopener noreferrer"}},[t._v("live backup storage"),e("OutboundLink")],1),t._v("\nsolutions from scratch.")]),t._v(" "),e("h1",{attrs:{id:"resources"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#resources"}},[t._v("#")]),t._v(" Resources")]),t._v(" "),e("ol",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lightningdevkit/vss-server",target:"_blank",rel:"noopener noreferrer"}},[t._v("vss-server"),e("OutboundLink")],1),t._v(" : A java and rust implementation of VSS server with\nPostgreSQL as default storage backend.")])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://crates.io/crates/vss-client",target:"_blank",rel:"noopener noreferrer"}},[t._v("vss-rust-client"),e("OutboundLink")],1),t._v(" : A rust client for VSS, with in-built support for retries,\nclient-side encryption and custom auth mechanism.")])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/lightningdevkit/ldk-node/blob/f1fdee50d5a8b628040fb2d584a7c4b831090de4/src/builder.rs#L441-L557",target:"_blank",rel:"noopener noreferrer"}},[t._v("LDK Node"),e("OutboundLink")],1),t._v(" :\nVSS is integrated with LDK Node and currently has alpha/experimental support.")])]),t._v(" "),e("li",[e("p",[t._v("Bindings: On the client side, VSS is also usable with existing LDK Node bindings in Kotlin/swift/python.")])])]),t._v(" "),e("h1",{attrs:{id:"support"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#support"}},[t._v("#")]),t._v(" Support")]),t._v(" "),e("p",[t._v("If you encounter any issues or have questions, feel free to open an issue on\nthe "),e("a",{attrs:{href:"https://github.com/lightningdevkit/vss-server/issues",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub repository"),e("OutboundLink")],1),t._v(". For further assistance or to discuss the\ndevelopment of VSS, you can reach out to us in the "),e("a",{attrs:{href:"https://discord.gg/5AcknnMfBw",target:"_blank",rel:"noopener noreferrer"}},[t._v("LDK Discord"),e("OutboundLink")],1),t._v(" in the "),e("code",[t._v("#vss")]),t._v(" channel.")])])}),[],!1,null,null,null);e.default=n.exports}}]);